import { Dialog, DialogTitle, Divider, Grid } from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { MultiSelectFilter } from "../../src/global/forms/MultiSelectFilterField";
import { SingleSelectFilterField } from "../../src/global/forms/SingleSelectFilterField";
import { PageContainer } from "../../src/global/PageContainer";
import { FilterButton } from "../../src/Tutorials/Components/buttons/FilterButton";
import { SortButton } from "../../src/Tutorials/Components/buttons/SortButton";
import { TutorialCard } from "../../src/Tutorials/Components/cards/TutorialCard";
import { filterAndSortMetaData } from "../../src/Tutorials/FilterAndSort/FilterAndSortMetaData";
import {
  availableLanguages,
  availableTags,
  availableTopics,
} from "../../src/Tutorials/tutorialDataService";
import { Languages, SortOptions, Tags, Topic } from "../../src/Tutorials/types";
import { slideTransition } from "../../utils/muiSpecificLogic";
import useDeviceDetect from "../../utils/useDeviceDetect";

const Transition = slideTransition("right");

const Tutorials: NextPage = () => {
  const { isMobile } = useDeviceDetect();
  const tutorialPurple = "#ce93d8";
  const [showFilterMenu, setShowFilterMenu] = React.useState(false);

  const [sortBy, setSortBy] = useState<SortOptions>(SortOptions.Newest);
  const [topicFilter, setTopicFilter] = useState<Topic | undefined>(undefined);
  const [languagesFilter, setFilteredLanguages] = useState([] as Languages[]);
  const [tagsFilter, setTagsFilter] = useState([] as Tags[]);
  const [metaData, setMetaData] = useState(
    filterAndSortMetaData(sortBy, topicFilter, languagesFilter, tagsFilter)
  );

  useEffect(() => {
    const preparedMetaData = filterAndSortMetaData(
      sortBy,
      topicFilter,
      languagesFilter,
      tagsFilter
    );
    setMetaData(preparedMetaData);
  }, [sortBy, topicFilter, languagesFilter, tagsFilter]);

  const handleCloseFilterMenu = () => {
    setShowFilterMenu(false);
  };

  const filterPopUp = (): JSX.Element => {
    return (
      <Dialog
        open={showFilterMenu}
        TransitionComponent={Transition}
        keepMounted
        onClose={handleCloseFilterMenu}
      >
        <div
          style={
            isMobile
              ? { margin: "10px 0px 50px 0px" }
              : { margin: "20px 50px 50px 50px" }
          }
        >
          <DialogTitle>{"Filter"}</DialogTitle>

          <Divider sx={{ borderColor: tutorialPurple }} />
          <SingleSelectFilterField
            label={"Topic"}
            defaultValue={"All"}
            filter={topicFilter}
            setFilter={setTopicFilter}
            dropDownData={availableTopics}
            highlightColor={tutorialPurple}
          />
          <MultiSelectFilter
            label={"Languages"}
            filter={languagesFilter}
            setFilter={setFilteredLanguages}
            dropDownData={availableLanguages}
            highlightColor={tutorialPurple}
          />
          <MultiSelectFilter
            label={"Tags"}
            filter={tagsFilter}
            setFilter={setTagsFilter}
            dropDownData={availableTags}
            highlightColor={tutorialPurple}
          />
        </div>
      </Dialog>
    );
  };

  return (
    <div>
      {filterPopUp()}
      <Head>
        <title>Tutorials</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageContainer>
        <div style={{ display: "flex", margin: "10px 30px", gap: "15px" }}>
          <SortButton setSortMetaDataBy={setSortBy} />
          <FilterButton setShowFilterMenu={setShowFilterMenu} />
        </div>

        <Grid container spacing={3} justifyContent="center">
          {metaData.map((dataItem) => {
            return (
              <Grid item key={dataItem.title}>
                <TutorialCard
                  cardData={dataItem}
                  accentColor={tutorialPurple}
                />
              </Grid>
            );
          })}
        </Grid>
      </PageContainer>
    </div>
  );
};

export default Tutorials;
